!function(Q){var I={};function F(U){if(I[U])return I[U].exports;var B=I[U]={i:U,l:!1,exports:{}};return Q[U].call(B.exports,B,B.exports,F),B.l=!0,B.exports}F.m=Q,F.c=I,F.d=function(Q,I,U){F.o(Q,I)||Object.defineProperty(Q,I,{enumerable:!0,get:U})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,I){if(1&I&&(Q=F(Q)),8&I)return Q;if(4&I&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(F.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&I&&"string"!=typeof Q)for(var B in Q)F.d(U,B,function(I){return Q[I]}.bind(null,B));return U},F.n=function(Q){var I=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(I,"a",I),I},F.o=function(Q,I){return Object.prototype.hasOwnProperty.call(Q,I)},F.p="",F(F.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/punto.ts\nclass Punto {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    equals(comparador) {\n        return this.x == comparador.x && this.y == comparador.y;\n    }\n    distancia(comparador) {\n        return Math.sqrt(Math.pow(this.x - comparador.x, 2) +\n            Math.pow(this.y - comparador.y, 2));\n    }\n}\n\n// CONCATENATED MODULE: ./src/torre.ts\nclass Torre {\n    constructor(_posicion, _rango, _tipoAtaque) {\n        this._posicion = _posicion;\n        this._rango = _rango;\n        this._tipoAtaque = _tipoAtaque;\n    }\n    get posicion() { return this._posicion; }\n    observar(monstruos) {\n        const enRango = (p) => p.distancia(this._posicion) >= this._rango;\n        const objetivo = monstruos\n            .filter(m => m.estaVivo)\n            .find(m => enRango(m.posicion));\n        this.cambiarObjetivo(objetivo);\n    }\n    cambiarObjetivo(nuevoObjetivo) {\n        this._objetivo = nuevoObjetivo;\n        if (nuevoObjetivo == null) {\n            this.detenerAtaque();\n            return;\n        }\n        this.comenzarAtaque();\n    }\n    comenzarAtaque() {\n        this.detenerAtaque();\n        this._idIntervaloAtaque = setInterval(() => this.atacarObjetivo(), this._tipoAtaque.cadenciaDeTiro);\n    }\n    detenerAtaque() {\n        clearInterval(this._idIntervaloAtaque);\n    }\n    atacarObjetivo() {\n        this._objetivo.recibirDanio(this._tipoAtaque.fuerza);\n        if (this._objetivo.vida <= 0) {\n            this.detenerAtaque();\n        }\n    }\n}\n\n// CONCATENATED MODULE: ./src/config.ts\nconst gameConfig = {\n    intervalo: 1000,\n    oleadas: [\n        { velocidad: 1, vida: 7, cantidad: 10 },\n        { velocidad: 1, vida: 9, cantidad: 12 }\n    ],\n    vidaJugador: 10\n};\n\n// CONCATENATED MODULE: ./src/monstruo.ts\n\n\nclass monstruo_Monstruo {\n    constructor(_velocidad, //celdas por frame\n    _vida, _camino /*secuencia de puntos ordenados\n                                que forman el camino*/) {\n        this._velocidad = _velocidad;\n        this._vida = _vida;\n        this._camino = _camino;\n        this._indicePosicion = 0;\n        this._posicion = this._camino[0];\n        this._ataca = false;\n    }\n    get estaVivo() { return this.vida > 0; }\n    get vida() {\n        return this._vida;\n    }\n    comenzarMovimiento() {\n        clearInterval(this._idIntervaloMovimiento);\n        this._idIntervaloMovimiento = setInterval(() => this.mover(), gameConfig.intervalo //1 fps\n        );\n    }\n    recibirDanio(danio) {\n        this._vida -= danio;\n        if (this._vida <= 0) {\n            this.morir();\n        }\n    }\n    get posicion() {\n        return this._posicion;\n    }\n    get ataca() {\n        return this._ataca;\n    }\n    mover() {\n        this._indicePosicion += this._velocidad;\n        if (this._indicePosicion >= this._camino.length) { //final del camino\n            this.morir();\n            this._ataca = true;\n            return;\n        }\n        this._posicion = this._camino[this._indicePosicion];\n    }\n    morir() {\n        clearInterval(this._idIntervaloMovimiento);\n        this._posicion = new Punto(-1, -1); /*Room of Doom\n                                            Sale de pantalla\n                                            Falta metodo de impresion\n                                            en pantalla.\n                                            Con observable supongo.*/\n    }\n}\n\n// CONCATENATED MODULE: ./src/tipoAtaque.ts\nclass TipoAtaque {\n    constructor(fuerza, cadenciaDeTiro) {\n        this.fuerza = fuerza;\n        this.cadenciaDeTiro = cadenciaDeTiro;\n    }\n}\n\n// CONCATENATED MODULE: ./src/escena.ts\nclass Escena {\n    constructor() {\n        this._contenedor = document.createElement('div');\n        this._contenedor.style.border = \"1px solid black\";\n        this._contenedor.style.display = 'inline-block';\n        this._contenedor.style.whiteSpace = 'pre';\n        this._contenedor.style.fontFamily = 'monospace';\n        document.body.innerHTML = '';\n        document.body.append(this._contenedor);\n    }\n    dibujarEscena(mapa, monstruos, torres) {\n        let tablero = this.dibujarCamino(mapa);\n        tablero = this.dibujarMonstruos(tablero, monstruos);\n        tablero = this.dibujarTorres(tablero, torres);\n        this.imprimirEscena(tablero);\n    }\n    dibujarCamino(mapa) {\n        const parse = x => x == 0 ? 'â– ' : ' ';\n        return mapa.map(x => x.map(parse));\n    }\n    dibujarTorres(tablero, torres) {\n        const parse = t => 'T';\n        let nuevoTablero = [...tablero];\n        torres.forEach(t => {\n            try {\n                nuevoTablero[t.posicion.y][t.posicion.x] = parse(t);\n            }\n            catch (_a) {\n                console.warn('torre no pudo ser dibujada', t);\n            }\n        });\n        return nuevoTablero;\n    }\n    dibujarMonstruos(tablero, monstruos) {\n        const parse = m => m.vida.toString();\n        let nuevoTablero = [...tablero];\n        monstruos.forEach(m => {\n            try {\n                nuevoTablero[m.posicion.y][m.posicion.x] = parse(m);\n            }\n            catch (_a) {\n                console.warn('monstruo no pudo ser dibujado', m);\n            }\n        });\n        return nuevoTablero;\n    }\n    imprimirEscena(tablero) {\n        this._contenedor.innerText = tablero.map(fila => fila.join('')).join('\\n');\n        console.log(tablero.map(fila => fila.join('')).join('\\n'));\n    }\n}\n\n// CONCATENATED MODULE: ./src/juego.ts\n\n\n\n\n\n\n//=======COLECCION DE MAPAS=========================\n// let mapa2 = [\n//             ['S','-','S','-','-','-','-','-','-','-','-','-','-','S','-','-','-']\n//            ,['S','-','S','S','S','S','-','-','-','-','-','-','-','S','-','-','-']\n//            ,['S','-','-','-','-','S','S','-','-','-','-','-','S','S','S','S','-']\n//            ,['S','S','S','S','-','-','S','-','-','-','-','-','S','-','-','S','-']\n//            ,['-','-','-','S','S','S','S','-','-','-','-','-','S','-','-','S','-']\n//            ,['-','-','-','-','-','-','S','S','S','S','S','S','S','-','-','S','-']\n//            ,['-','S','S','S','S','-','-','-','S','-','-','-','-','-','S','S','-']\n//            ,['-','S','-','-','S','-','-','-','S','-','-','-','-','S','S','-','-']\n//            ,['-','S','-','-','S','S','-','-','S','-','-','-','S','S','-','-','-']\n//            ,['-','S','-','-','-','S','-','-','S','S','S','S','S','-','-','-','-']\n//            ,['-','S','-','-','-','S','S','S','S','-','-','-','-','-','-','-','-']\n//         ];\n// let mapa1 = [\n//             ['S01','---','---','---','---','---'],\n//             ['S02','S03','S04','S05','S06','S07'],\n//             ['---','---','---','---','---','S08'],\n//             ['S15','S14','S12','S11','S10','S09'],\n//             ['S16','---','---','---','---','---'],\n//             ['S17','---','---','---','---','---'],\n//             ['S18','S19','S20','S21','S22','S23'],\n//             ['---','---','---','---','---','S24'],\n//             ['---','---','---','---','---','S25'],\n//             ['---','---','---','---','---','S26'],\n//             ['S32','S31','S30','S29','S28','S27'],\n//             ['S33','---','---','---','---','---'],\n//         ];\nlet mapa3 = [\n    [1, 2, 3, 4],\n    [0, 0, 0, 5],\n    [9, 8, 7, 6]\n];\n//============JUEGO===================================\nclass juego_Juego {\n    constructor(mapa) {\n        this._oleada = 0;\n        this._torres = [];\n        this._monstruos = [];\n        this._camino = [];\n        this._vida = gameConfig.vidaJugador;\n        this._mapa = mapa;\n        this.init();\n        this._escena = new Escena();\n    }\n    init() {\n        this.leerCamino();\n        //this.crearTorre(new Punto(1, 0), 2, new TipoAtaque(3, 500));\n        this.crearTorre(new Punto(1, 1), 2, new TipoAtaque(3, 500));\n        this.comenzarOleada();\n    }\n    comenzarOleada() {\n        this.crearOleada();\n        this.comenzarMovimiento();\n    }\n    crearOleada() {\n        const datos = gameConfig.oleadas[this._oleada];\n        for (let i = 0; i < datos.cantidad; i++) {\n            this.crearMonstruo(datos.velocidad, datos.vida, this._camino);\n        }\n    }\n    comenzarMovimiento() {\n        let indiceMonstruo = 0;\n        let idInterval = setInterval(() => {\n            if (indiceMonstruo < this._monstruos.length) {\n                this._monstruos[indiceMonstruo].comenzarMovimiento();\n                indiceMonstruo++;\n            }\n            this.notificarTorres();\n            let todosMuertos = this._monstruos\n                .reduce((acc, curr) => acc = acc && !curr.estaVivo, true);\n            let danio = this._monstruos\n                .reduce((acc, curr) => {\n                return curr.ataca ? acc++ : acc;\n            }, 0); /*cuantos monstruos atacaron,\n                    cada monstruo aplica 1 de danio*/\n            this.recibirDanio(danio);\n            if (todosMuertos) {\n                clearInterval(idInterval);\n                if (this._oleada < gameConfig.oleadas.length) {\n                    this._oleada++;\n                    this.comenzarOleada();\n                }\n                else {\n                    this.terminarJuego(true);\n                }\n            }\n            this._escena.dibujarEscena(this._mapa, this._monstruos, this._torres);\n            console.log(this._vida.toString());\n            console.log(this._camino);\n        }, gameConfig.intervalo);\n    }\n    recibirDanio(danio) {\n        this._vida -= danio;\n        if (this._vida <= 0) {\n            this.terminarJuego(false);\n        }\n    }\n    terminarJuego(victoria) { console.log('JUEGO TERMINADO'); }\n    ;\n    notificarTorres() {\n        this._torres.forEach(t => t.observar(this._monstruos));\n    }\n    muestraMapa() {\n        //Por implementar, dibujar monstruos y torres\n        document.body.innerHTML = '';\n        for (let row of this._mapa) {\n            for (let col of row) {\n                if (col === 0) {\n                    document.write('-');\n                }\n                else {\n                    document.write(' ');\n                }\n            }\n            document.write(\"<br />\");\n        }\n    }\n    leerCamino() {\n        let x = 0;\n        let y = 0;\n        for (let row of this._mapa) {\n            for (let col of row) {\n                if (col === (this._camino.length + 1)) {\n                    this._camino.push(new Punto(x, y));\n                    this.leerCamino();\n                }\n                x++;\n            }\n            y++;\n        }\n        /* mira el mapa y ve cual es el camino, asi podemos tener\n        una coleccion de mapas y solo cambiar de mapa, y asi\n        puede haber un diseÃ±ador de mapas que no necesita\n        saber nada del resto del codigo\n\n        this._camino = []; //Vacia el array, por si las moscas\n        let x = -1;\n        let y = -1;\n        let previo = 0; /* se refiere al valor tipo number\n        contenido en la casilla anterior. Los numeros\n        mayores a 0 indican correspondencia a camino\n        y su indice\n\n        for (let row of this._mapa) {\n            y++;\n\n            for (let col of row) {\n                x++;\n\n                if (col != 0) {\n                    // Â¿es != o !==?, digo por lo de === envez de ==.\n\n                    if (col > previo) {\n                        this._camino.push(new Punto(x, y));\n                    }\n                    else if (col < previo) {\n                        this._camino.unshift(new Punto(x, y));\n                    }\n                    else {\n                        return Error; /* Â¿Que hace esto realmente?\n                        Mi intencion es que simplemente avise que algo\n                        esta mal para que lo revisemos\n                    }\n                }\n            }\n        }*/\n    }\n    crearTorre(pos, rango, tipoAtaque) {\n        let torre = new Torre(pos, rango, tipoAtaque);\n        this._torres.push(torre);\n    }\n    crearMonstruo(velocidad, vida, camino) {\n        let monstruo = new monstruo_Monstruo(velocidad, vida, camino);\n        this._monstruos.push(monstruo);\n    }\n}\n\n// CONCATENATED MODULE: ./src/main.ts\n\n/*const e = new Escena();\n\n(window as any).escena = e;\n\n*/\nconst main_mapa = [\n    [1, 2, 3, 4],\n    [0, 0, 0, 5],\n    [9, 8, 7, 6]\n];\nlet juego = new juego_Juego(main_mapa);\n/*\nconst caminoDePuntos = [];\nfor (let i = 0; i < camino.length; i++) {\n    for (let j = 0; j < camino[i].length; j++) {\n        const element = camino[i][j]\n        if (element != 0) {\n            caminoDePuntos.push(new Punto(i, j));\n        }\n    }\n}\n\nconst torre = new Torre(new Punto(1,1), 3, new TipoAtaque(5, 444));\n\nconst monstruo = new Monstruo(1, 4, caminoDePuntos);\n\ne.dibujarEscena(camino, [monstruo], [torre]);*/\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")}]);