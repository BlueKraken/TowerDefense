!function(Q){var U={};function F(B){if(U[B])return U[B].exports;var I=U[B]={i:B,l:!1,exports:{}};return Q[B].call(I.exports,I,I.exports,F),I.l=!0,I.exports}F.m=Q,F.c=U,F.d=function(Q,U,B){F.o(Q,U)||Object.defineProperty(Q,U,{enumerable:!0,get:B})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,U){if(1&U&&(Q=F(Q)),8&U)return Q;if(4&U&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&U&&"string"!=typeof Q)for(var I in Q)F.d(B,I,function(U){return Q[U]}.bind(null,I));return B},F.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(U,"a",U),U},F.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},F.p="",F(F.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/punto.ts\nclass Punto {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    equals(comparador) {\n        return this.x == comparador.x && this.y == comparador.y;\n    }\n    distancia(comparador) {\n        return Math.sqrt(Math.pow(this.x - comparador.x, 2) +\n            Math.pow(this.y - comparador.y, 2));\n    }\n}\n\n// CONCATENATED MODULE: ./src/torre.ts\nclass Torre {\n    constructor(_posicion, _rango, _tipoAtaque) {\n        this._posicion = _posicion;\n        this._rango = _rango;\n        this._tipoAtaque = _tipoAtaque;\n    }\n    get posicion() { return this._posicion; }\n    observar(monstruos) {\n        const enRango = (p) => p.distancia(this._posicion) <= this._rango;\n        const objetivo = monstruos\n            .filter(m => m.estaVivo)\n            .find(m => enRango(m.posicion));\n        this.cambiarObjetivo(objetivo);\n    }\n    cambiarObjetivo(nuevoObjetivo) {\n        this._objetivo = nuevoObjetivo;\n        if (nuevoObjetivo == null) {\n            this.detenerAtaque();\n            return;\n        }\n        this.comenzarAtaque();\n    }\n    comenzarAtaque() {\n        this.detenerAtaque();\n        this._idIntervaloAtaque = setInterval(() => this.atacarObjetivo(), this._tipoAtaque.cadenciaDeTiro);\n    }\n    detenerAtaque() {\n        clearInterval(this._idIntervaloAtaque);\n    }\n    atacarObjetivo() {\n        console.log('atacando');\n        if (this._objetivo.vida <= 0) {\n            this.detenerAtaque();\n        }\n        this._objetivo.recibirDanio(this._tipoAtaque.fuerza);\n    }\n}\n\n// CONCATENATED MODULE: ./src/config.ts\nconst gameConfig = {\n    intervalo: 1000,\n    oleadas: [\n        { velocidad: 1, vida: 7, cantidad: 10, ataque: 1 },\n        { velocidad: 1, vida: 9, cantidad: 12, ataque: 2 }\n    ],\n    vidaJugador: 10\n};\n\n// CONCATENATED MODULE: ./src/monstruo.ts\n\n\nclass monstruo_Monstruo {\n    constructor(_velocidad, //celdas por frame\n    _vida, _camino, /*secuencia de puntos ordenados\n                                que forman el camino*/ _ataque) {\n        this._velocidad = _velocidad;\n        this._vida = _vida;\n        this._camino = _camino;\n        this._ataque = _ataque;\n        this._indicePosicion = 0;\n        this._posicion = this._camino[0];\n    }\n    get ataque() {\n        return this._ataque;\n    }\n    get estaVivo() { return this.vida > 0; }\n    get vida() {\n        return this._vida;\n    }\n    comenzarMovimiento() {\n        clearInterval(this._idIntervaloMovimiento);\n        this._idIntervaloMovimiento = setInterval(() => this.mover(), gameConfig.intervalo //1 fps\n        );\n    }\n    recibirDanio(danio) {\n        this._vida -= danio;\n        if (this._vida <= 0) {\n            this.morir();\n        }\n    }\n    get posicion() {\n        return this._posicion;\n    }\n    mover() {\n        this._indicePosicion += this._velocidad;\n        if (this._indicePosicion >= this._camino.length) { //final del camino\n            this.desaparecer();\n            return;\n        }\n        this._posicion = this._camino[this._indicePosicion];\n    }\n    morir() {\n        this.detenerMovimiento();\n    }\n    desaparecer() {\n        this.detenerMovimiento();\n        this._posicion = new Punto(-1, -1);\n    }\n    detenerMovimiento() {\n        clearInterval(this._idIntervaloMovimiento);\n    }\n}\n\n// CONCATENATED MODULE: ./src/tipoAtaque.ts\nclass TipoAtaque {\n    constructor(fuerza, cadenciaDeTiro) {\n        this.fuerza = fuerza;\n        this.cadenciaDeTiro = cadenciaDeTiro;\n    }\n}\n\n// CONCATENATED MODULE: ./src/escena.ts\nclass Escena {\n    constructor() {\n        this._contenedor = document.createElement('div');\n        this._contenedor.style.border = \"1px solid black\";\n        this._contenedor.style.display = 'inline-block';\n        this._contenedor.style.whiteSpace = 'pre';\n        this._contenedor.style.fontFamily = 'monospace';\n        document.body.innerHTML = '';\n        document.body.append(this._contenedor);\n    }\n    dibujarEscena(mapa, monstruos, torres) {\n        let tablero = this.dibujarCamino(mapa);\n        tablero = this.dibujarMonstruos(tablero, monstruos);\n        tablero = this.dibujarTorres(tablero, torres);\n        this.imprimirEscena(tablero);\n    }\n    dibujarCamino(mapa) {\n        const parse = x => x == 0 ? 'â– ' : ' ';\n        return mapa.map(x => x.map(parse));\n    }\n    dibujarTorres(tablero, torres) {\n        const parse = t => 'T';\n        let nuevoTablero = [...tablero];\n        torres.forEach(t => {\n            try {\n                nuevoTablero[t.posicion.y][t.posicion.x] = parse(t);\n            }\n            catch (_a) {\n                console.warn('torre no pudo ser dibujada', t);\n            }\n        });\n        return nuevoTablero;\n    }\n    dibujarMonstruos(tablero, monstruos) {\n        const parse = m => m.vida.toString();\n        let nuevoTablero = [...tablero];\n        monstruos.forEach(m => {\n            try {\n                nuevoTablero[m.posicion.y][m.posicion.x] = parse(m);\n            }\n            catch (_a) {\n                console.warn('monstruo no pudo ser dibujado', m);\n            }\n        });\n        return nuevoTablero;\n    }\n    imprimirEscena(tablero) {\n        this._contenedor.innerText = tablero.map(fila => fila.join('')).join('\\n');\n    }\n}\n\n// CONCATENATED MODULE: ./src/juego.ts\n\n\n\n\n\n\nclass juego_Juego {\n    constructor(mapa) {\n        this._oleada = 0;\n        this._torres = [];\n        this._monstruos = [];\n        this._camino = [];\n        this._vida = gameConfig.vidaJugador;\n        this._mapa = mapa;\n        this.init();\n        this._escena = new Escena();\n    }\n    get _monstruosVivos() {\n        return this._monstruos.filter(m => m.vida > 0);\n    }\n    init() {\n        this.leerCamino();\n        //this.crearTorre(new Punto(1, 0), 2, new TipoAtaque(3, 500));\n        this.crearTorre(new Punto(1, 1), 2, new TipoAtaque(3, 500));\n        this.comenzarOleada();\n    }\n    comenzarOleada() {\n        this.crearOleada();\n        this.comenzarMovimiento();\n    }\n    crearOleada() {\n        const datos = gameConfig.oleadas[this._oleada];\n        this._monstruos = [];\n        for (let i = 0; i < datos.cantidad; i++) {\n            this.crearMonstruo(datos.velocidad, datos.vida, this._camino, datos.ataque);\n        }\n    }\n    comenzarMovimiento() {\n        let indiceMonstruo = 0;\n        let idInterval = setInterval(() => {\n            if (indiceMonstruo < this._monstruos.length) {\n                this._monstruos[indiceMonstruo].comenzarMovimiento();\n                indiceMonstruo++;\n            }\n            this.notificarTorres();\n            this._monstruos.forEach((m, i, a) => {\n                if (m.vida > 0 && m.posicion.equals(new Punto(-1, -1))) {\n                    // quitar vida al jugador y matar monstruo\n                    this.perderVida(m.ataque);\n                    a[i].recibirDanio(999);\n                }\n            });\n            if (this._monstruosVivos.length == 0) {\n                clearInterval(idInterval);\n                if (this._oleada < gameConfig.oleadas.length) {\n                    this._oleada++;\n                    this.comenzarOleada();\n                }\n                else {\n                    this.terminarJuego(true);\n                }\n            }\n            this._escena.dibujarEscena(this._mapa, this._monstruosVivos, this._torres);\n            console.log(this._vida.toString());\n        }, gameConfig.intervalo);\n    }\n    perderVida(danio) {\n        this._vida -= danio;\n        if (this._vida <= 0) {\n            this.terminarJuego(false);\n        }\n    }\n    terminarJuego(victoria) { console.log('JUEGO TERMINADO'); }\n    ;\n    notificarTorres() {\n        this._torres.forEach(t => t.observar(this._monstruosVivos));\n    }\n    mostrarMapa() {\n        //Por implementar, dibujar monstruos y torres\n        document.body.innerHTML = '';\n        for (let row of this._mapa) {\n            for (let col of row) {\n                if (col === 0) {\n                    document.write('#');\n                }\n                else {\n                    document.write(' ');\n                }\n            }\n            document.write(\"<br />\");\n        }\n    }\n    leerCamino() {\n        let x = 0;\n        let y = 0;\n        for (let row of this._mapa) {\n            for (let col of row) {\n                if (col == (this._camino.length + 1)) {\n                    this._camino.push(new Punto(x, y));\n                    this.leerCamino();\n                }\n                x++;\n            }\n            y++;\n            x = 0;\n        }\n    }\n    crearTorre(pos, rango, tipoAtaque) {\n        let torre = new Torre(pos, rango, tipoAtaque);\n        this._torres.push(torre);\n    }\n    eliminarTorre(torre) {\n        let index = this._torres.indexOf(torre);\n        this._torres.splice(index, 1);\n    }\n    crearMonstruo(velocidad, vida, camino, ataque) {\n        let monstruo = new monstruo_Monstruo(velocidad, vida, camino, ataque);\n        this._monstruos.push(monstruo);\n    }\n}\n\n// CONCATENATED MODULE: ./src/main.ts\n\nconst main_mapa = [\n    [1, 2, 3, 4],\n    [0, 0, 0, 5],\n    [9, 8, 7, 6]\n];\nlet juego = new juego_Juego(main_mapa);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcHVudG8udHM/ZGI4YSIsIndlYnBhY2s6Ly8vLi9zcmMvdG9ycmUudHM/ODdhZiIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnLnRzP2Q3MGIiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vbnN0cnVvLnRzP2Q0NjgiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RpcG9BdGFxdWUudHM/OWU4ZiIsIndlYnBhY2s6Ly8vLi9zcmMvZXNjZW5hLnRzPzI5NjMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2p1ZWdvLnRzPzJiOGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHM/Y2Q0OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBTyxNQUFNLEtBQUs7SUFDZCxZQUNXLENBQVMsRUFDVCxDQUFTO1FBRFQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNULE1BQUMsR0FBRCxDQUFDLENBQVE7SUFBRyxDQUFDO0lBRWpCLE1BQU0sQ0FBQyxVQUFpQjtRQUMzQixPQUFPLElBQUksQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVNLFNBQVMsQ0FBQyxVQUFpQjtRQUM5QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQ1osSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNyQyxDQUFDO0lBQ04sQ0FBQztDQUNKOzs7QUNYTSxNQUFNLEtBQUs7SUFDZCxZQUNZLFNBQWdCLEVBQ2hCLE1BQWMsRUFDZCxXQUF1QjtRQUZ2QixjQUFTLEdBQVQsU0FBUyxDQUFPO1FBQ2hCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxnQkFBVyxHQUFYLFdBQVcs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TyxVQUFVLENBQUMsR0FBUyxFQUFFLEtBQVksRUFBRSxVQUFxQjtRQUM3RCxJQUFJLEtBQUssR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQzlDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFTyxhQUFhLENBQUMsS0FBVztRQUM3QixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN4QyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVPLGFBQWEsQ0FBQyxTQUFnQixFQUFFLElBQVcsRUFBRSxNQUFjLEVBQUUsTUFBTTtRQUN2RSxJQUFJLFFBQVEsR0FBRyxJQUFJLGlCQUFRLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDbkMsQ0FBQztDQUNKOzs7QUMzSitCO0FBRWhDLE1BQU0sU0FBSSxHQUFHO0lBQ1QsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7SUFDVCxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNULENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0NBQ1osQ0FBQztBQUVGLElBQUksS0FBSyxHQUFHLElBQUksV0FBSyxDQUFDLFNBQUksQ0FBQyxDQUFDIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgUHVudG8ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgeDogbnVtYmVyLFxuICAgICAgICBwdWJsaWMgeTogbnVtYmVyKSB7fVxuXG4gICAgcHVibGljIGVxdWFscyhjb21wYXJhZG9yOiBQdW50bykge1xuICAgICAgICByZXR1cm4gdGhpcy54ID09IGNvbXBhcmFkb3IueCAmJiB0aGlzLnkgPT0gY29tcGFyYWRvci55O1xuICAgIH1cblxuICAgIHB1YmxpYyBkaXN0YW5jaWEoY29tcGFyYWRvcjogUHVudG8pIHtcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChcbiAgICAgICAgICAgIE1hdGgucG93KHRoaXMueCAtIGNvbXBhcmFkb3IueCwgMikgKyBcbiAgICAgICAgICAgIE1hdGgucG93KHRoaXMueSAtIGNvbXBhcmFkb3IueSwgMilcbiAgICAgICAgKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgUHVudG8gfSBmcm9tIFwiLi9wdW50b1wiO1xuaW1wb3J0IHsgTW9uc3RydW8gfSBmcm9tIFwiLi9tb25zdHJ1b1wiO1xuaW1wb3J0IHsgVGlwb0F0YXF1ZSB9IGZyb20gXCIuL3RpcG9BdGFxdWVcIjtcblxuZXhwb3J0IGNsYXNzIFRvcnJlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBfcG9zaWNpb246IFB1bnRvLFxuICAgICAgICBwcml2YXRlIF9yYW5nbzogbnVtYmVyLFxuICAgICAgICBwcml2YXRlIF90aXBvQXRhcXVlOiBUaXBvQXRhcXVlKSB7fVxuICAgIFxuICAgIHByaXZhdGUgX29iamV0aXZvOiBNb25zdHJ1bztcbiAgICBwcml2YXRlIF9pZEludGVydmFsb0F0YXF1ZTogbnVtYmVyO1xuXG4gICAgcHVibGljIGdldCBwb3NpY2lvbigpOiBQdW50byB7IHJldHVybiB0aGlzLl9wb3NpY2lvbjsgfVxuXG4gICAgcHVibGljIG9ic2VydmFyKG1vbnN0cnVvczogTW9uc3RydW9bXSkge1xuICAgICAgICBjb25zdCBlblJhbmdvID0gKHA6IFB1bnRvKSA9PiBcbiAgICAgICAgICAgIHAuZGlzdGFuY2lhKHRoaXMuX3Bvc2ljaW9uKSA8PSB0aGlzLl9yYW5nbztcblxuICAgICAgICBjb25zdCBvYmpldGl2byA9IG1vbnN0cnVvc1xuICAgICAgICAgICAgLmZpbHRlcihtID0+IG0uZXN0YVZpdm8pXG4gICAgICAgICAgICAuZmluZChtID0+IGVuUmFuZ28obS5wb3NpY2lvbikpO1xuXG4gICAgICAgIHRoaXMuY2FtYmlhck9iamV0aXZvKG9iamV0aXZvKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNhbWJpYXJPYmpldGl2byhudWV2b09iamV0aXZvOiBNb25zdHJ1bykge1xuICAgICAgICB0aGlzLl9vYmpldGl2byA9IG51ZXZvT2JqZXRpdm87XG5cbiAgICAgICAgaWYgKG51ZXZvT2JqZXRpdm8gPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5kZXRlbmVyQXRhcXVlKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gXG5cbiAgICAgICAgdGhpcy5jb21lbnphckF0YXF1ZSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY29tZW56YXJBdGFxdWUoKSB7XG4gICAgICAgIHRoaXMuZGV0ZW5lckF0YXF1ZSgpO1xuXG4gICAgICAgIHRoaXMuX2lkSW50ZXJ2YWxvQXRhcXVlID0gc2V0SW50ZXJ2YWwoXG4gICAgICAgICAgICAoKSA9PiB0aGlzLmF0YWNhck9iamV0aXZvKCksXG4gICAgICAgICAgICB0aGlzLl90aXBvQXRhcXVlLmNhZGVuY2lhRGVUaXJvKVxuICAgIH1cblxuICAgIHByaXZhdGUgZGV0ZW5lckF0YXF1ZSgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pZEludGVydmFsb0F0YXF1ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhdGFjYXJPYmpldGl2bygpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2F0YWNhbmRvJyk7XG4gICAgICAgIGlmICh0aGlzLl9vYmpldGl2by52aWRhIDw9IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGV0ZW5lckF0YXF1ZSgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9vYmpldGl2by5yZWNpYmlyRGFuaW8odGhpcy5fdGlwb0F0YXF1ZS5mdWVyemEpO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgZ2FtZUNvbmZpZyA9IHtcbiAgICBpbnRlcnZhbG86IDEwMDAsXG4gICAgb2xlYWRhczogW1xuICAgICAgICB7IHZlbG9jaWRhZDogMSwgdmlkYTogNywgY2FudGlkYWQ6IDEwLCBhdGFxdWU6IDEgfSxcbiAgICAgICAgeyB2ZWxvY2lkYWQ6IDEsIHZpZGE6IDksIGNhbnRpZGFkOiAxMiwgYXRhcXVlOiAyIH1cbiAgICBdIGFzIE9sZWFkYVtdLFxuICAgIHZpZGFKdWdhZG9yOiAxMFxufVxuXG5pbnRlcmZhY2UgT2xlYWRhIHtcbiAgICB2ZWxvY2lkYWQ6IG51bWJlcixcbiAgICB2aWRhOiBudW1iZXIsXG4gICAgY2FudGlkYWQ6IG51bWJlcixcbiAgICBhdGFxdWU6IG51bWJlclxufSIsImltcG9ydCB7IFB1bnRvIH0gZnJvbSBcIi4vcHVudG9cIjtcbmltcG9ydCB7IGdhbWVDb25maWcgfSBmcm9tIFwiLi9jb25maWdcIjtcblxuZXhwb3J0IGNsYXNzIE1vbnN0cnVvIHtcbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIHByaXZhdGUgX3ZlbG9jaWRhZDogbnVtYmVyLCAvL2NlbGRhcyBwb3IgZnJhbWVcbiAgICAgICAgcHJpdmF0ZSBfdmlkYTogbnVtYmVyLFxuICAgICAgICBwcml2YXRlIF9jYW1pbm86IFB1bnRvW10sIC8qc2VjdWVuY2lhIGRlIHB1bnRvcyBvcmRlbmFkb3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZSBmb3JtYW4gZWwgY2FtaW5vKi9cbiAgICAgICAgcHJpdmF0ZSBfYXRhcXVlOiBudW1iZXJcbiAgICApIHtcbiAgICAgICAgdGhpcy5faW5kaWNlUG9zaWNpb24gPSAwO1xuICAgICAgICB0aGlzLl9wb3NpY2lvbiA9IHRoaXMuX2NhbWlub1swXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGF0YXF1ZSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXRhcXVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgZXN0YVZpdm8oKTogYm9vbGVhbiB7IHJldHVybiB0aGlzLnZpZGEgPiAwOyB9XG5cbiAgICBwdWJsaWMgZ2V0IHZpZGEoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZGE7XG4gICAgfVxuXG4gICAgcHVibGljIGNvbWVuemFyTW92aW1pZW50bygpIHsgLypTZSBsbGFtYSBkZXNkZSBqdWVnbyovXG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faWRJbnRlcnZhbG9Nb3ZpbWllbnRvKTtcbiAgICAgICAgdGhpcy5faWRJbnRlcnZhbG9Nb3ZpbWllbnRvID0gc2V0SW50ZXJ2YWwoXG4gICAgICAgICAgICAoKSA9PiB0aGlzLm1vdmVyKCksXG4gICAgICAgICAgICBnYW1lQ29uZmlnLmludGVydmFsbyAvLzEgZnBzXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlY2liaXJEYW5pbyhkYW5pbzogbnVtYmVyKSB7IC8qU2UgbGxhbWEgZGVzZGUgdG9ycmUqL1xuICAgICAgICB0aGlzLl92aWRhIC09IGRhbmlvO1xuICAgICAgICBpZiAodGhpcy5fdmlkYSA8PSAwKSB7XG4gICAgICAgICAgICB0aGlzLm1vcmlyKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIF9wb3NpY2lvbjogUHVudG87IC8vcG9zaWNpb25cbiAgICBwdWJsaWMgZ2V0IHBvc2ljaW9uKCk6IFB1bnRvIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc2ljaW9uO1xuICAgIH1cblxuICAgIHByaXZhdGUgX2luZGljZVBvc2ljaW9uOiBudW1iZXI7IC8vaW5kaWNlIGRlIHBvc2ljaW9uIGVuIGVsIGNhbWlub1xuICAgIHByaXZhdGUgX2lkSW50ZXJ2YWxvTW92aW1pZW50bzogbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSBtb3ZlcigpIHtcbiAgICAgICAgdGhpcy5faW5kaWNlUG9zaWNpb24gKz0gdGhpcy5fdmVsb2NpZGFkO1xuICAgICAgICBpZiAodGhpcy5faW5kaWNlUG9zaWNpb24gPj0gdGhpcy5fY2FtaW5vLmxlbmd0aCkgeyAvL2ZpbmFsIGRlbCBjYW1pbm9cbiAgICAgICAgICAgIHRoaXMuZGVzYXBhcmVjZXIoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wb3NpY2lvbiA9IHRoaXMuX2NhbWlub1t0aGlzLl9pbmRpY2VQb3NpY2lvbl07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtb3JpcigpIHtcbiAgICAgICAgdGhpcy5kZXRlbmVyTW92aW1pZW50bygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGVzYXBhcmVjZXIoKSB7XG4gICAgICAgIHRoaXMuZGV0ZW5lck1vdmltaWVudG8oKTtcbiAgICAgICAgdGhpcy5fcG9zaWNpb24gPSBuZXcgUHVudG8oLTEsIC0xKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRldGVuZXJNb3ZpbWllbnRvKCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMuX2lkSW50ZXJ2YWxvTW92aW1pZW50byk7XG4gICAgfVxufVxuXG4iLCJleHBvcnQgY2xhc3MgVGlwb0F0YXF1ZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBmdWVyemE6IG51bWJlcixcbiAgICAgICAgcHVibGljIGNhZGVuY2lhRGVUaXJvOiBudW1iZXJcbiAgICApIHt9XG59IiwiaW1wb3J0IHsgTW9uc3RydW8gfSBmcm9tIFwiLi9tb25zdHJ1b1wiO1xuaW1wb3J0IHsgVG9ycmUgfSBmcm9tIFwiLi90b3JyZVwiO1xuXG5leHBvcnQgY2xhc3MgRXNjZW5hIHtcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fY29udGVuZWRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB0aGlzLl9jb250ZW5lZG9yLnN0eWxlLmJvcmRlciA9IFwiMXB4IHNvbGlkIGJsYWNrXCI7XG4gICAgICAgIHRoaXMuX2NvbnRlbmVkb3Iuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xuICAgICAgICB0aGlzLl9jb250ZW5lZG9yLnN0eWxlLndoaXRlU3BhY2UgPSAncHJlJztcbiAgICAgICAgdGhpcy5fY29udGVuZWRvci5zdHlsZS5mb250RmFtaWx5ID0gJ21vbm9zcGFjZSc7XG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQodGhpcy5fY29udGVuZWRvcik7XG4gICAgICAgIFxuICAgIH1cblxuICAgIHByaXZhdGUgX2NvbnRlbmVkb3I6IEhUTUxEaXZFbGVtZW50O1xuICAgIFxuICAgIHB1YmxpYyBkaWJ1amFyRXNjZW5hKG1hcGE6IG51bWJlcltdW10sIG1vbnN0cnVvczogTW9uc3RydW9bXSwgdG9ycmVzOiBUb3JyZVtdKSBcbiAgICB7XG4gICAgICAgIGxldCB0YWJsZXJvID0gdGhpcy5kaWJ1amFyQ2FtaW5vKG1hcGEpO1xuXG4gICAgICAgIHRhYmxlcm8gPSB0aGlzLmRpYnVqYXJNb25zdHJ1b3ModGFibGVybywgbW9uc3RydW9zKTtcblxuICAgICAgICB0YWJsZXJvID0gdGhpcy5kaWJ1amFyVG9ycmVzKHRhYmxlcm8sIHRvcnJlcyk7XG5cbiAgICAgICAgdGhpcy5pbXByaW1pckVzY2VuYSh0YWJsZXJvKTtcbiAgICAgICAgXG4gICAgfVxuICAgIFxuICAgIHByaXZhdGUgZGlidWphckNhbWlubyhtYXBhOiBudW1iZXJbXVtdKTogc3RyaW5nW11bXSB7XG4gICAgICAgIGNvbnN0IHBhcnNlOiBUb0FzY2lpPG51bWJlcj4gPSB4ID0+IHggPT0gMCA/ICfilqAnIDogJyAnO1xuXG4gICAgICAgIHJldHVybiBtYXBhLm1hcCh4ID0+IHgubWFwKHBhcnNlKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkaWJ1amFyVG9ycmVzKHRhYmxlcm86IHN0cmluZ1tdW10sIHRvcnJlczogVG9ycmVbXSk6IHN0cmluZ1tdW10ge1xuICAgICAgICBjb25zdCBwYXJzZTogVG9Bc2NpaTxUb3JyZT4gPSB0ID0+ICdUJztcblxuICAgICAgICBsZXQgbnVldm9UYWJsZXJvID0gWy4uLnRhYmxlcm9dO1xuICAgICAgICBcbiAgICAgICAgdG9ycmVzLmZvckVhY2goXG4gICAgICAgICAgICB0ID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBudWV2b1RhYmxlcm9bdC5wb3NpY2lvbi55XVt0LnBvc2ljaW9uLnhdID0gcGFyc2UodClcbiAgICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCd0b3JyZSBubyBwdWRvIHNlciBkaWJ1amFkYScsIHQpICAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG51ZXZvVGFibGVybztcbiAgICB9XG5cbiAgICBwcml2YXRlIGRpYnVqYXJNb25zdHJ1b3ModGFibGVybzogc3RyaW5nW11bXSwgbW9uc3RydW9zOiBNb25zdHJ1b1tdKTogc3RyaW5nW11bXSB7XG4gICAgICAgIGNvbnN0IHBhcnNlOiBUb0FzY2lpPE1vbnN0cnVvPiA9IG0gPT4gbS52aWRhLnRvU3RyaW5nKCk7XG4gICAgICAgIFxuICAgICAgICBsZXQgbnVldm9UYWJsZXJvID0gWy4uLnRhYmxlcm9dO1xuXG4gICAgICAgIG1vbnN0cnVvcy5mb3JFYWNoKFxuICAgICAgICAgICAgbSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbnVldm9UYWJsZXJvW20ucG9zaWNpb24ueV1bbS5wb3NpY2lvbi54XSA9IHBhcnNlKG0pXG4gICAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignbW9uc3RydW8gbm8gcHVkbyBzZXIgZGlidWphZG8nLCBtKTtcbiAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG51ZXZvVGFibGVybztcbiAgICB9XG5cbiAgICBwcml2YXRlIGltcHJpbWlyRXNjZW5hKHRhYmxlcm86IHN0cmluZ1tdW10pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5fY29udGVuZWRvci5pbm5lclRleHQgPSB0YWJsZXJvLm1hcChcbiAgICAgICAgICAgIGZpbGEgPT4gZmlsYS5qb2luKCcnKSkuam9pbignXFxuJyk7XG4gICAgfVxufVxuXG50eXBlIFRvQXNjaWk8VD4gPSAoeDogVCkgPT4gc3RyaW5nOyIsImltcG9ydCB7IFB1bnRvIH0gZnJvbSBcIi4vcHVudG9cIjtcbmltcG9ydCB7IFRvcnJlIH0gZnJvbSBcIi4vdG9ycmVcIjtcbmltcG9ydCB7IE1vbnN0cnVvIH0gZnJvbSBcIi4vbW9uc3RydW9cIjtcbmltcG9ydCB7IFRpcG9BdGFxdWUgfSBmcm9tIFwiLi90aXBvQXRhcXVlXCI7XG5pbXBvcnQgeyBnYW1lQ29uZmlnIH0gZnJvbSBcIi4vY29uZmlnXCI7XG5pbXBvcnQgeyBFc2NlbmEgfSBmcm9tIFwiLi9lc2NlbmFcIjtcblxuZXhwb3J0IGNsYXNzIEp1ZWdvIHtcbiAgICBwcml2YXRlIF9tYXBhOiBudW1iZXJbXVtdO1xuICAgIHByaXZhdGUgX2NhbWlubzogUHVudG9bXTsgXG4gICAgcHJpdmF0ZSBfbW9uc3RydW9zOiBNb25zdHJ1b1tdO1xuICAgIHByaXZhdGUgX3RvcnJlczogVG9ycmVbXTtcbiAgICBwcml2YXRlIF9vbGVhZGE6IG51bWJlciA9IDA7XG4gICAgcHJpdmF0ZSBfdmlkYTogbnVtYmVyO1xuICAgIHByaXZhdGUgX2VzY2VuYTogRXNjZW5hO1xuXG4gICAgY29uc3RydWN0b3IobWFwYTogbnVtYmVyW11bXSkge1xuICAgICAgICB0aGlzLl90b3JyZXMgPSBbXTtcbiAgICAgICAgdGhpcy5fbW9uc3RydW9zID0gW107XG4gICAgICAgIHRoaXMuX2NhbWlubyA9IFtdO1xuICAgICAgICB0aGlzLl92aWRhID0gZ2FtZUNvbmZpZy52aWRhSnVnYWRvcjtcbiAgICAgICAgdGhpcy5fbWFwYSA9IG1hcGE7XG4gICAgICAgIHRoaXMuaW5pdCgpO1xuICAgICAgICB0aGlzLl9lc2NlbmEgPSBuZXcgRXNjZW5hKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgX21vbnN0cnVvc1Zpdm9zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW9uc3RydW9zLmZpbHRlcihtID0+IG0udmlkYSA+IDApO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW5pdCgpIHtcbiAgICAgICAgdGhpcy5sZWVyQ2FtaW5vKCk7XG5cbiAgICAgICAgLy90aGlzLmNyZWFyVG9ycmUobmV3IFB1bnRvKDEsIDApLCAyLCBuZXcgVGlwb0F0YXF1ZSgzLCA1MDApKTtcbiAgICAgICAgdGhpcy5jcmVhclRvcnJlKG5ldyBQdW50bygxLCAxKSwgMiwgbmV3IFRpcG9BdGFxdWUoMywgNTAwKSk7XG5cbiAgICAgICAgdGhpcy5jb21lbnphck9sZWFkYSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY29tZW56YXJPbGVhZGEoKSB7XG4gICAgICAgIHRoaXMuY3JlYXJPbGVhZGEoKTtcbiAgICAgICAgdGhpcy5jb21lbnphck1vdmltaWVudG8oKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWFyT2xlYWRhKCkge1xuICAgICAgICBjb25zdCBkYXRvcyA9IGdhbWVDb25maWcub2xlYWRhc1t0aGlzLl9vbGVhZGFdO1xuXG4gICAgICAgIHRoaXMuX21vbnN0cnVvcyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0b3MuY2FudGlkYWQ7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5jcmVhck1vbnN0cnVvKGRhdG9zLnZlbG9jaWRhZCwgZGF0b3MudmlkYSwgdGhpcy5fY2FtaW5vLCBkYXRvcy5hdGFxdWUpOyAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb21lbnphck1vdmltaWVudG8oKSB7XG4gICAgICAgIGxldCBpbmRpY2VNb25zdHJ1byA9IDA7XG5cbiAgICAgICAgbGV0IGlkSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kaWNlTW9uc3RydW8gPCB0aGlzLl9tb25zdHJ1b3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9uc3RydW9zW2luZGljZU1vbnN0cnVvXS5jb21lbnphck1vdmltaWVudG8oKTtcbiAgICAgICAgICAgICAgICBpbmRpY2VNb25zdHJ1bysrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhclRvcnJlcygpO1xuXG4gICAgICAgICAgICB0aGlzLl9tb25zdHJ1b3MuZm9yRWFjaCgobSwgaSwgYSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChtLnZpZGEgPiAwICYmIG0ucG9zaWNpb24uZXF1YWxzKG5ldyBQdW50bygtMSwgLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBxdWl0YXIgdmlkYSBhbCBqdWdhZG9yIHkgbWF0YXIgbW9uc3RydW9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXJkZXJWaWRhKG0uYXRhcXVlKTtcbiAgICAgICAgICAgICAgICAgICAgYVtpXS5yZWNpYmlyRGFuaW8oOTk5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX21vbnN0cnVvc1Zpdm9zLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpZEludGVydmFsKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fb2xlYWRhIDwgZ2FtZUNvbmZpZy5vbGVhZGFzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbGVhZGErKztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21lbnphck9sZWFkYSgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGVybWluYXJKdWVnbyh0cnVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fZXNjZW5hLmRpYnVqYXJFc2NlbmEodGhpcy5fbWFwYSwgdGhpcy5fbW9uc3RydW9zVml2b3MsIHRoaXMuX3RvcnJlcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMuX3ZpZGEudG9TdHJpbmcoKSk7XG4gICAgICAgIH0sIGdhbWVDb25maWcuaW50ZXJ2YWxvKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHBlcmRlclZpZGEoZGFuaW86IG51bWJlcikge1xuICAgICAgICB0aGlzLl92aWRhIC09IGRhbmlvO1xuICAgICAgICBpZiAodGhpcy5fdmlkYSA8PTApIHtcbiAgICAgICAgICAgIHRoaXMudGVybWluYXJKdWVnbyhmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHRlcm1pbmFySnVlZ28odmljdG9yaWE6IGJvb2xlYW4pIHsgY29uc29sZS5sb2coJ0pVRUdPIFRFUk1JTkFETycpIH07XG5cbiAgICBwcml2YXRlIG5vdGlmaWNhclRvcnJlcygpIHtcbiAgICAgICAgdGhpcy5fdG9ycmVzLmZvckVhY2godCA9PiB0Lm9ic2VydmFyKHRoaXMuX21vbnN0cnVvc1Zpdm9zKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtb3N0cmFyTWFwYSgpIHtcbiAgICAgICAgLy9Qb3IgaW1wbGVtZW50YXIsIGRpYnVqYXIgbW9uc3RydW9zIHkgdG9ycmVzXG4gICAgICAgIGRvY3VtZW50LmJvZHkuaW5uZXJIVE1MID0gJyc7XG4gICAgICAgIFxuICAgICAgICBmb3IgKGxldCByb3cgb2YgdGhpcy5fbWFwYSkge1xuXG4gICAgICAgICAgICBmb3IgKGxldCBjb2wgb2Ygcm93KSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC53cml0ZSgnIycpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LndyaXRlKCcgJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkb2N1bWVudC53cml0ZShcIjxiciAvPlwiKTtcbiAgICAgICAgfSAgICAgICBcbiAgICB9XG5cbiAgICBwcml2YXRlIGxlZXJDYW1pbm8oKSB7XG5cbiAgICAgICAgbGV0IHggPSAwO1xuICAgICAgICBsZXQgeSA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgcm93IG9mIHRoaXMuX21hcGEpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGNvbCBvZiByb3cpIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoY29sID09ICh0aGlzLl9jYW1pbm8ubGVuZ3RoICsgMSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FtaW5vLnB1c2gobmV3IFB1bnRvKHgsIHkpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWVyQ2FtaW5vKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHkrKztcbiAgICAgICAgICAgIHggPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhclRvcnJlKHBvczpQdW50bywgcmFuZ286bnVtYmVyLCB0aXBvQXRhcXVlOlRpcG9BdGFxdWUpIHtcbiAgICAgICAgbGV0IHRvcnJlID0gbmV3IFRvcnJlKHBvcywgcmFuZ28sIHRpcG9BdGFxdWUpO1xuICAgICAgICB0aGlzLl90b3JyZXMucHVzaCh0b3JyZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBlbGltaW5hclRvcnJlKHRvcnJlOlRvcnJlKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHRoaXMuX3RvcnJlcy5pbmRleE9mKHRvcnJlKTtcbiAgICAgICAgdGhpcy5fdG9ycmVzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjcmVhck1vbnN0cnVvKHZlbG9jaWRhZDpudW1iZXIsIHZpZGE6bnVtYmVyLCBjYW1pbm86UHVudG9bXSwgYXRhcXVlKSB7XG4gICAgICAgIGxldCBtb25zdHJ1byA9IG5ldyBNb25zdHJ1byh2ZWxvY2lkYWQsIHZpZGEsIGNhbWlubywgYXRhcXVlKTtcbiAgICAgICAgdGhpcy5fbW9uc3RydW9zLnB1c2gobW9uc3RydW8pO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBKdWVnbyB9IGZyb20gXCIuL2p1ZWdvXCI7XG5cbmNvbnN0IG1hcGEgPSBbXG4gICAgWzEsMiwzLDRdLFxuICAgIFswLDAsMCw1XSxcbiAgICBbOSw4LDcsNl1cbl07XG5cbmxldCBqdWVnbyA9IG5ldyBKdWVnbyhtYXBhKTtcblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///0\n")}]);