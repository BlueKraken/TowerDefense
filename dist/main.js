!function(Q){var U={};function F(B){if(U[B])return U[B].exports;var I=U[B]={i:B,l:!1,exports:{}};return Q[B].call(I.exports,I,I.exports,F),I.l=!0,I.exports}F.m=Q,F.c=U,F.d=function(Q,U,B){F.o(Q,U)||Object.defineProperty(Q,U,{enumerable:!0,get:B})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,U){if(1&U&&(Q=F(Q)),8&U)return Q;if(4&U&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&U&&"string"!=typeof Q)for(var I in Q)F.d(B,I,function(U){return Q[U]}.bind(null,I));return B},F.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(U,"a",U),U},F.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},F.p="",F(F.s=0)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/punto.ts\nclass Punto {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    equals(comparador) {\n        return this.x == comparador.x && this.y == comparador.y;\n    }\n    distancia(comparador) {\n        return Math.sqrt(Math.pow(this.x - comparador.x, 2) +\n            Math.pow(this.y - comparador.y, 2));\n    }\n}\n\n// CONCATENATED MODULE: ./src/torre.ts\nclass Torre {\n    constructor(_posicion, _rango, _tipoAtaque) {\n        this._posicion = _posicion;\n        this._rango = _rango;\n        this._tipoAtaque = _tipoAtaque;\n        this._atacando = false;\n    }\n    get posicion() { return this._posicion; }\n    observar(monstruos) {\n        if (this._atacando) {\n            return;\n        }\n        const enRango = (p) => p.distancia(this._posicion) <= this._rango;\n        const objetivo = monstruos\n            .filter(m => m.estaVivo)\n            .find(m => enRango(m.posicion));\n        this.cambiarObjetivo(objetivo);\n    }\n    cambiarObjetivo(nuevoObjetivo) {\n        this._objetivo = nuevoObjetivo;\n        if (nuevoObjetivo == null) {\n            this.detenerAtaque();\n            return;\n        }\n        this.comenzarAtaque();\n    }\n    comenzarAtaque() {\n        this.detenerAtaque();\n        this._atacando = true;\n        this._idIntervaloAtaque = setInterval(() => this.atacarObjetivo(), this._tipoAtaque.cadenciaDeTiro);\n    }\n    detenerAtaque() {\n        this._atacando = false;\n        clearInterval(this._idIntervaloAtaque);\n    }\n    atacarObjetivo() {\n        console.log('atacando');\n        if (this._objetivo.vida <= 0) {\n            this.detenerAtaque();\n        }\n        this._objetivo.recibirDanio(this._tipoAtaque.fuerza);\n    }\n}\n\n// CONCATENATED MODULE: ./src/config.ts\nconst gameConfig = {\n    intervalo: 1000,\n    oleadas: [\n        { velocidad: 1, vida: 7, cantidad: 10 },\n        { velocidad: 1, vida: 9, cantidad: 12 }\n    ],\n    vidaJugador: 10\n};\n\n// CONCATENATED MODULE: ./src/monstruo.ts\n\n\nclass monstruo_Monstruo {\n    constructor(_velocidad, //celdas por frame\n    _vida, _camino /*secuencia de puntos ordenados\n                                que forman el camino*/) {\n        this._velocidad = _velocidad;\n        this._vida = _vida;\n        this._camino = _camino;\n        this._indicePosicion = 0;\n        this._posicion = this._camino[0];\n    }\n    get estaVivo() { return this.vida > 0; }\n    get vida() {\n        return this._vida;\n    }\n    comenzarMovimiento() {\n        clearInterval(this._idIntervaloMovimiento);\n        this._idIntervaloMovimiento = setInterval(() => this.mover(), gameConfig.intervalo //1 fps\n        );\n    }\n    recibirDanio(danio) {\n        this._vida -= danio;\n        if (this._vida <= 0) {\n            this.morir();\n        }\n    }\n    get posicion() {\n        return this._posicion;\n    }\n    mover() {\n        this._indicePosicion += this._velocidad;\n        if (this._indicePosicion >= this._camino.length) { //final del camino\n            this.desaparecer();\n            return;\n        }\n        this._posicion = this._camino[this._indicePosicion];\n    }\n    morir() {\n        this.detenerMovimiento();\n    }\n    desaparecer() {\n        this.detenerMovimiento();\n        this._posicion = new Punto(-1, -1);\n    }\n    detenerMovimiento() {\n        clearInterval(this._idIntervaloMovimiento);\n    }\n}\n\n// CONCATENATED MODULE: ./src/tipoAtaque.ts\nclass TipoAtaque {\n    constructor(fuerza, cadenciaDeTiro) {\n        this.fuerza = fuerza;\n        this.cadenciaDeTiro = cadenciaDeTiro;\n    }\n}\n\n// CONCATENATED MODULE: ./src/escena.ts\nclass Escena {\n    constructor() {\n        this._contenedor = document.createElement('div');\n        this._contenedor.style.border = \"1px solid black\";\n        this._contenedor.style.display = 'inline-block';\n        this._contenedor.style.whiteSpace = 'pre';\n        this._contenedor.style.fontFamily = 'monospace';\n        document.body.innerHTML = '';\n        document.body.append(this._contenedor);\n    }\n    dibujarEscena(mapa, monstruos, torres) {\n        let tablero = this.dibujarCamino(mapa);\n        tablero = this.dibujarMonstruos(tablero, monstruos);\n        tablero = this.dibujarTorres(tablero, torres);\n        this.imprimirEscena(tablero);\n    }\n    dibujarCamino(mapa) {\n        const parse = x => x == 0 ? 'â– ' : ' ';\n        return mapa.map(x => x.map(parse));\n    }\n    dibujarTorres(tablero, torres) {\n        const parse = t => 'T';\n        let nuevoTablero = [...tablero];\n        torres.forEach(t => {\n            try {\n                nuevoTablero[t.posicion.y][t.posicion.x] = parse(t);\n            }\n            catch (_a) {\n                console.warn('torre no pudo ser dibujada', t);\n            }\n        });\n        return nuevoTablero;\n    }\n    dibujarMonstruos(tablero, monstruos) {\n        const parse = m => m.vida.toString();\n        let nuevoTablero = [...tablero];\n        monstruos.forEach(m => {\n            try {\n                nuevoTablero[m.posicion.y][m.posicion.x] = parse(m);\n            }\n            catch (_a) {\n                console.warn('monstruo no pudo ser dibujado', m);\n            }\n        });\n        return nuevoTablero;\n    }\n    imprimirEscena(tablero) {\n        this._contenedor.innerText = tablero.map(fila => fila.join('')).join('\\n');\n    }\n}\n\n// CONCATENATED MODULE: ./src/juego.ts\n\n\n\n\n\n\nclass juego_Juego {\n    constructor(mapa) {\n        this._oleada = 0;\n        this._torres = [];\n        this._monstruos = [];\n        this._camino = [];\n        this._vida = gameConfig.vidaJugador;\n        this._mapa = mapa;\n        this.init();\n        this._escena = new Escena();\n    }\n    get _monstruosVivos() {\n        return this._monstruos.filter(m => m.vida > 0);\n    }\n    init() {\n        this.leerCamino();\n        //this.crearTorre(new Punto(1, 0), 2, new TipoAtaque(3, 500));\n        this.crearTorre(new Punto(1, 1), 2, new TipoAtaque(3, 500));\n        this.comenzarOleada();\n    }\n    comenzarOleada() {\n        this.crearOleada();\n        this.comenzarMovimiento();\n    }\n    crearOleada() {\n        const datos = gameConfig.oleadas[this._oleada];\n        this._monstruos = [];\n        for (let i = 0; i < datos.cantidad; i++) {\n            this.crearMonstruo(datos.velocidad, datos.vida, this._camino);\n        }\n    }\n    comenzarMovimiento() {\n        let indiceMonstruo = 0;\n        let idInterval = setInterval(() => {\n            if (indiceMonstruo < this._monstruos.length) {\n                this._monstruos[indiceMonstruo].comenzarMovimiento();\n                indiceMonstruo++;\n            }\n            this.notificarTorres();\n            this._monstruos.forEach((m, i, a) => {\n                if (m.vida > 0 && m.posicion.equals(new Punto(-1, -1))) {\n                    // quitar vida al jugador y matar monstruo\n                    a[i].recibirDanio(999);\n                    this.perderVida(1);\n                }\n            });\n            if (this._monstruosVivos.length == 0) {\n                clearInterval(idInterval);\n                if (this._oleada < gameConfig.oleadas.length) {\n                    this._oleada++;\n                    this.comenzarOleada();\n                }\n                else {\n                    this.terminarJuego(true);\n                }\n            }\n            this._escena.dibujarEscena(this._mapa, this._monstruosVivos, this._torres);\n            console.log(this._vida.toString());\n        }, gameConfig.intervalo);\n    }\n    perderVida(danio) {\n        this._vida -= danio;\n        if (this._vida <= 0) {\n            this.terminarJuego(false);\n        }\n    }\n    terminarJuego(victoria) { console.log('JUEGO TERMINADO'); }\n    ;\n    notificarTorres() {\n        this._torres.forEach(t => t.observar(this._monstruosVivos));\n    }\n    mostrarMapa() {\n        //Por implementar, dibujar monstruos y torres\n        document.body.innerHTML = '';\n        for (let row of this._mapa) {\n            for (let col of row) {\n                if (col === 0) {\n                    document.write('#');\n                }\n                else {\n                    document.write(' ');\n                }\n            }\n            document.write(\"<br />\");\n        }\n    }\n    leerCamino() {\n        let x = 0;\n        let y = 0;\n        for (let row of this._mapa) {\n            for (let col of row) {\n                if (col == (this._camino.length + 1)) {\n                    this._camino.push(new Punto(x, y));\n                    this.leerCamino();\n                }\n                x++;\n            }\n            y++;\n            x = 0;\n        }\n    }\n    crearTorre(pos, rango, tipoAtaque) {\n        let torre = new Torre(pos, rango, tipoAtaque);\n        this._torres.push(torre);\n    }\n    eliminarTorre(torre) {\n        let index = this._torres.indexOf(torre);\n        this._torres.splice(index, 1);\n    }\n    crearMonstruo(velocidad, vida, camino) {\n        let monstruo = new monstruo_Monstruo(velocidad, vida, camino);\n        this._monstruos.push(monstruo);\n    }\n}\n\n// CONCATENATED MODULE: ./src/main.ts\n\nconst main_mapa = [\n    [1, 2, 3, 4],\n    [0, 0, 0, 5],\n    [9, 8, 7, 6]\n];\nlet juego = new juego_Juego(main_mapa);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcHVudG8udHM/ZGI4YSIsIndlYnBhY2s6Ly8vLi9zcmMvdG9ycmUudHM/ODdhZiIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnLnRzP2Q3MGIiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vbnN0cnVvLnRzP2Q0NjgiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RpcG9BdGFxdWUudHM/OWU4ZiIsIndlYnBhY2s6Ly8vLi9zcmMvZXNjZW5hLnRzPzI5NjMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2p1ZWdvLnRzPzJiOGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4udHM/Y2Q0OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBTyxNQUFNLEtBQUs7SUFDZCxZQUNXLENBQVMsRUFDVCxDQUFTO1FBRFQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNULE1BQUMsR0FBRCxDQUFDLENBQVE7SUFBRyxDQUFDO0lBRWpCLE1BQU0sQ0FBQyxVQUFpQjtRQUMzQixPQUFPLElBQUksQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVNLFNBQVMsQ0FBQyxVQUFpQjtRQUM5QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQ1osSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ2xDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNyQyxDQUFDO0lBQ04sQ0FBQztDQUNKOzs7QUNYTSxNQUFNLEtBQUs7SUFDZCxZQUNZLFNBQWdCLEVBQ2hCLE1BQWMsRUFDZCxXQUF1QjtRQUZ2QixjQUFTLEdBQVQsU0FBUyxDQUFPO1FBQ2hCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxnQkFBVyxHQUFYLFdBQVcs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QUFDLEdBQVMsRUFBRSxLQUFZLEVBQUUsVUFBcUI7UUFDN0QsSUFBSSxLQUFLLEdBQUcsSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRU8sYUFBYSxDQUFDLEtBQVc7UUFDN0IsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFTyxhQUFhLENBQUMsU0FBZ0IsRUFBRSxJQUFXLEVBQUUsTUFBYztRQUMvRCxJQUFJLFFBQVEsR0FBRyxJQUFJLGlCQUFRLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxDQUFDO0NBQ0o7OztBQzNKK0I7QUFFaEMsTUFBTSxTQUFJLEdBQUc7SUFDVCxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNULENBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO0lBQ1QsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxFQUFDLENBQUMsRUFBQyxDQUFDLENBQUM7Q0FDWixDQUFDO0FBRUYsSUFBSSxLQUFLLEdBQUcsSUFBSSxXQUFLLENBQUMsU0FBSSxDQUFDLENBQUMiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBQdW50byB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyB4OiBudW1iZXIsXG4gICAgICAgIHB1YmxpYyB5OiBudW1iZXIpIHt9XG5cbiAgICBwdWJsaWMgZXF1YWxzKGNvbXBhcmFkb3I6IFB1bnRvKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnggPT0gY29tcGFyYWRvci54ICYmIHRoaXMueSA9PSBjb21wYXJhZG9yLnk7XG4gICAgfVxuXG4gICAgcHVibGljIGRpc3RhbmNpYShjb21wYXJhZG9yOiBQdW50bykge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KFxuICAgICAgICAgICAgTWF0aC5wb3codGhpcy54IC0gY29tcGFyYWRvci54LCAyKSArIFxuICAgICAgICAgICAgTWF0aC5wb3codGhpcy55IC0gY29tcGFyYWRvci55LCAyKVxuICAgICAgICApO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBQdW50byB9IGZyb20gXCIuL3B1bnRvXCI7XG5pbXBvcnQgeyBNb25zdHJ1byB9IGZyb20gXCIuL21vbnN0cnVvXCI7XG5pbXBvcnQgeyBUaXBvQXRhcXVlIH0gZnJvbSBcIi4vdGlwb0F0YXF1ZVwiO1xuXG5leHBvcnQgY2xhc3MgVG9ycmUge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIF9wb3NpY2lvbjogUHVudG8sXG4gICAgICAgIHByaXZhdGUgX3JhbmdvOiBudW1iZXIsXG4gICAgICAgIHByaXZhdGUgX3RpcG9BdGFxdWU6IFRpcG9BdGFxdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX2F0YWNhbmRvID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICBcbiAgICBwcml2YXRlIF9vYmpldGl2bzogTW9uc3RydW87XG4gICAgcHJpdmF0ZSBfaWRJbnRlcnZhbG9BdGFxdWU6IG51bWJlcjtcbiAgICBwcml2YXRlIF9hdGFjYW5kbzogYm9vbGVhbjtcblxuICAgIHB1YmxpYyBnZXQgcG9zaWNpb24oKTogUHVudG8geyByZXR1cm4gdGhpcy5fcG9zaWNpb247IH1cblxuICAgIHB1YmxpYyBvYnNlcnZhcihtb25zdHJ1b3M6IE1vbnN0cnVvW10pIHtcbiAgICAgICAgaWYgKHRoaXMuX2F0YWNhbmRvKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZW5SYW5nbyA9IChwOiBQdW50bykgPT4gXG4gICAgICAgICAgICBwLmRpc3RhbmNpYSh0aGlzLl9wb3NpY2lvbikgPD0gdGhpcy5fcmFuZ287XG5cbiAgICAgICAgY29uc3Qgb2JqZXRpdm8gPSBtb25zdHJ1b3NcbiAgICAgICAgICAgIC5maWx0ZXIobSA9PiBtLmVzdGFWaXZvKVxuICAgICAgICAgICAgLmZpbmQobSA9PiBlblJhbmdvKG0ucG9zaWNpb24pKTtcblxuICAgICAgICB0aGlzLmNhbWJpYXJPYmpldGl2byhvYmpldGl2byk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjYW1iaWFyT2JqZXRpdm8obnVldm9PYmpldGl2bzogTW9uc3RydW8pIHtcbiAgICAgICAgdGhpcy5fb2JqZXRpdm8gPSBudWV2b09iamV0aXZvO1xuXG4gICAgICAgIGlmIChudWV2b09iamV0aXZvID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuZGV0ZW5lckF0YXF1ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IFxuXG4gICAgICAgIHRoaXMuY29tZW56YXJBdGFxdWUoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNvbWVuemFyQXRhcXVlKCkge1xuICAgICAgICB0aGlzLmRldGVuZXJBdGFxdWUoKTtcbiAgICAgICAgdGhpcy5fYXRhY2FuZG8gPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuX2lkSW50ZXJ2YWxvQXRhcXVlID0gc2V0SW50ZXJ2YWwoXG4gICAgICAgICAgICAoKSA9PiB0aGlzLmF0YWNhck9iamV0aXZvKCksXG4gICAgICAgICAgICB0aGlzLl90aXBvQXRhcXVlLmNhZGVuY2lhRGVUaXJvKVxuICAgIH1cblxuICAgIHByaXZhdGUgZGV0ZW5lckF0YXF1ZSgpIHtcbiAgICAgICAgdGhpcy5fYXRhY2FuZG8gPSBmYWxzZTtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pZEludGVydmFsb0F0YXF1ZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhdGFjYXJPYmpldGl2bygpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ2F0YWNhbmRvJyk7XG4gICAgICAgIGlmICh0aGlzLl9vYmpldGl2by52aWRhIDw9IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGV0ZW5lckF0YXF1ZSgpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLl9vYmpldGl2by5yZWNpYmlyRGFuaW8odGhpcy5fdGlwb0F0YXF1ZS5mdWVyemEpO1xuICAgIH1cbn0iLCJleHBvcnQgY29uc3QgZ2FtZUNvbmZpZyA9IHtcbiAgICBpbnRlcnZhbG86IDEwMDAsXG4gICAgb2xlYWRhczogW1xuICAgICAgICB7IHZlbG9jaWRhZDogMSwgdmlkYTogNywgY2FudGlkYWQ6IDEwIH0sXG4gICAgICAgIHsgdmVsb2NpZGFkOiAxLCB2aWRhOiA5LCBjYW50aWRhZDogMTIgfVxuICAgIF0gYXMgT2xlYWRhW10sXG4gICAgdmlkYUp1Z2Fkb3I6IDEwXG59XG5cbmludGVyZmFjZSBPbGVhZGEge1xuICAgIHZlbG9jaWRhZDogbnVtYmVyLFxuICAgIHZpZGE6IG51bWJlcixcbiAgICBjYW50aWRhZDogbnVtYmVyXG59IiwiaW1wb3J0IHsgUHVudG8gfSBmcm9tIFwiLi9wdW50b1wiO1xuaW1wb3J0IHsgZ2FtZUNvbmZpZyB9IGZyb20gXCIuL2NvbmZpZ1wiO1xuXG5leHBvcnQgY2xhc3MgTW9uc3RydW8ge1xuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgcHJpdmF0ZSBfdmVsb2NpZGFkOiBudW1iZXIsIC8vY2VsZGFzIHBvciBmcmFtZVxuICAgICAgICBwcml2YXRlIF92aWRhOiBudW1iZXIsXG4gICAgICAgIHByaXZhdGUgX2NhbWlubzogUHVudG9bXSAvKnNlY3VlbmNpYSBkZSBwdW50b3Mgb3JkZW5hZG9zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWUgZm9ybWFuIGVsIGNhbWlubyovXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2luZGljZVBvc2ljaW9uID0gMDtcbiAgICAgICAgdGhpcy5fcG9zaWNpb24gPSB0aGlzLl9jYW1pbm9bMF07XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBlc3RhVml2bygpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMudmlkYSA+IDA7IH1cblxuICAgIHB1YmxpYyBnZXQgdmlkYSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlkYTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29tZW56YXJNb3ZpbWllbnRvKCkgeyAvKlNlIGxsYW1hIGRlc2RlIGp1ZWdvKi9cbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pZEludGVydmFsb01vdmltaWVudG8pO1xuICAgICAgICB0aGlzLl9pZEludGVydmFsb01vdmltaWVudG8gPSBzZXRJbnRlcnZhbChcbiAgICAgICAgICAgICgpID0+IHRoaXMubW92ZXIoKSxcbiAgICAgICAgICAgIGdhbWVDb25maWcuaW50ZXJ2YWxvIC8vMSBmcHNcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVjaWJpckRhbmlvKGRhbmlvOiBudW1iZXIpIHsgLypTZSBsbGFtYSBkZXNkZSB0b3JyZSovXG4gICAgICAgIHRoaXMuX3ZpZGEgLT0gZGFuaW87XG4gICAgICAgIGlmICh0aGlzLl92aWRhIDw9IDApIHtcbiAgICAgICAgICAgIHRoaXMubW9yaXIoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgX3Bvc2ljaW9uOiBQdW50bzsgLy9wb3NpY2lvblxuICAgIHB1YmxpYyBnZXQgcG9zaWNpb24oKTogUHVudG8ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9zaWNpb247XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfaW5kaWNlUG9zaWNpb246IG51bWJlcjsgLy9pbmRpY2UgZGUgcG9zaWNpb24gZW4gZWwgY2FtaW5vXG4gICAgcHJpdmF0ZSBfaWRJbnRlcnZhbG9Nb3ZpbWllbnRvOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIG1vdmVyKCkge1xuICAgICAgICB0aGlzLl9pbmRpY2VQb3NpY2lvbiArPSB0aGlzLl92ZWxvY2lkYWQ7XG4gICAgICAgIGlmICh0aGlzLl9pbmRpY2VQb3NpY2lvbiA+PSB0aGlzLl9jYW1pbm8ubGVuZ3RoKSB7IC8vZmluYWwgZGVsIGNhbWlub1xuICAgICAgICAgICAgdGhpcy5kZXNhcGFyZWNlcigpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Bvc2ljaW9uID0gdGhpcy5fY2FtaW5vW3RoaXMuX2luZGljZVBvc2ljaW9uXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1vcmlyKCkge1xuICAgICAgICB0aGlzLmRldGVuZXJNb3ZpbWllbnRvKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZXNhcGFyZWNlcigpIHtcbiAgICAgICAgdGhpcy5kZXRlbmVyTW92aW1pZW50bygpO1xuICAgICAgICB0aGlzLl9wb3NpY2lvbiA9IG5ldyBQdW50bygtMSwgLTEpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGV0ZW5lck1vdmltaWVudG8oKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5faWRJbnRlcnZhbG9Nb3ZpbWllbnRvKTtcbiAgICB9XG59XG5cbiIsImV4cG9ydCBjbGFzcyBUaXBvQXRhcXVlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIGZ1ZXJ6YTogbnVtYmVyLFxuICAgICAgICBwdWJsaWMgY2FkZW5jaWFEZVRpcm86IG51bWJlclxuICAgICkge31cbn0iLCJpbXBvcnQgeyBNb25zdHJ1byB9IGZyb20gXCIuL21vbnN0cnVvXCI7XG5pbXBvcnQgeyBUb3JyZSB9IGZyb20gXCIuL3RvcnJlXCI7XG5cbmV4cG9ydCBjbGFzcyBFc2NlbmEge1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9jb250ZW5lZG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHRoaXMuX2NvbnRlbmVkb3Iuc3R5bGUuYm9yZGVyID0gXCIxcHggc29saWQgYmxhY2tcIjtcbiAgICAgICAgdGhpcy5fY29udGVuZWRvci5zdHlsZS5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XG4gICAgICAgIHRoaXMuX2NvbnRlbmVkb3Iuc3R5bGUud2hpdGVTcGFjZSA9ICdwcmUnO1xuICAgICAgICB0aGlzLl9jb250ZW5lZG9yLnN0eWxlLmZvbnRGYW1pbHkgPSAnbW9ub3NwYWNlJztcblxuICAgICAgICBkb2N1bWVudC5ib2R5LmlubmVySFRNTCA9ICcnO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0aGlzLl9jb250ZW5lZG9yKTtcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfY29udGVuZWRvcjogSFRNTERpdkVsZW1lbnQ7XG4gICAgXG4gICAgcHVibGljIGRpYnVqYXJFc2NlbmEobWFwYTogbnVtYmVyW11bXSwgbW9uc3RydW9zOiBNb25zdHJ1b1tdLCB0b3JyZXM6IFRvcnJlW10pIFxuICAgIHtcbiAgICAgICAgbGV0IHRhYmxlcm8gPSB0aGlzLmRpYnVqYXJDYW1pbm8obWFwYSk7XG5cbiAgICAgICAgdGFibGVybyA9IHRoaXMuZGlidWphck1vbnN0cnVvcyh0YWJsZXJvLCBtb25zdHJ1b3MpO1xuXG4gICAgICAgIHRhYmxlcm8gPSB0aGlzLmRpYnVqYXJUb3JyZXModGFibGVybywgdG9ycmVzKTtcblxuICAgICAgICB0aGlzLmltcHJpbWlyRXNjZW5hKHRhYmxlcm8pO1xuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgcHJpdmF0ZSBkaWJ1amFyQ2FtaW5vKG1hcGE6IG51bWJlcltdW10pOiBzdHJpbmdbXVtdIHtcbiAgICAgICAgY29uc3QgcGFyc2U6IFRvQXNjaWk8bnVtYmVyPiA9IHggPT4geCA9PSAwID8gJ+KWoCcgOiAnICc7XG5cbiAgICAgICAgcmV0dXJuIG1hcGEubWFwKHggPT4geC5tYXAocGFyc2UpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRpYnVqYXJUb3JyZXModGFibGVybzogc3RyaW5nW11bXSwgdG9ycmVzOiBUb3JyZVtdKTogc3RyaW5nW11bXSB7XG4gICAgICAgIGNvbnN0IHBhcnNlOiBUb0FzY2lpPFRvcnJlPiA9IHQgPT4gJ1QnO1xuXG4gICAgICAgIGxldCBudWV2b1RhYmxlcm8gPSBbLi4udGFibGVyb107XG4gICAgICAgIFxuICAgICAgICB0b3JyZXMuZm9yRWFjaChcbiAgICAgICAgICAgIHQgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIG51ZXZvVGFibGVyb1t0LnBvc2ljaW9uLnldW3QucG9zaWNpb24ueF0gPSBwYXJzZSh0KVxuICAgICAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3RvcnJlIG5vIHB1ZG8gc2VyIGRpYnVqYWRhJywgdCkgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbnVldm9UYWJsZXJvO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGlidWphck1vbnN0cnVvcyh0YWJsZXJvOiBzdHJpbmdbXVtdLCBtb25zdHJ1b3M6IE1vbnN0cnVvW10pOiBzdHJpbmdbXVtdIHtcbiAgICAgICAgY29uc3QgcGFyc2U6IFRvQXNjaWk8TW9uc3RydW8+ID0gbSA9PiBtLnZpZGEudG9TdHJpbmcoKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBudWV2b1RhYmxlcm8gPSBbLi4udGFibGVyb107XG5cbiAgICAgICAgbW9uc3RydW9zLmZvckVhY2goXG4gICAgICAgICAgICBtID0+IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBudWV2b1RhYmxlcm9bbS5wb3NpY2lvbi55XVttLnBvc2ljaW9uLnhdID0gcGFyc2UobSlcbiAgICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdtb25zdHJ1byBubyBwdWRvIHNlciBkaWJ1amFkbycsIG0pO1xuICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gbnVldm9UYWJsZXJvO1xuICAgIH1cblxuICAgIHByaXZhdGUgaW1wcmltaXJFc2NlbmEodGFibGVybzogc3RyaW5nW11bXSk6IHZvaWQge1xuICAgICAgICB0aGlzLl9jb250ZW5lZG9yLmlubmVyVGV4dCA9IHRhYmxlcm8ubWFwKFxuICAgICAgICAgICAgZmlsYSA9PiBmaWxhLmpvaW4oJycpKS5qb2luKCdcXG4nKTtcbiAgICB9XG59XG5cbnR5cGUgVG9Bc2NpaTxUPiA9ICh4OiBUKSA9PiBzdHJpbmc7IiwiaW1wb3J0IHsgUHVudG8gfSBmcm9tIFwiLi9wdW50b1wiO1xuaW1wb3J0IHsgVG9ycmUgfSBmcm9tIFwiLi90b3JyZVwiO1xuaW1wb3J0IHsgTW9uc3RydW8gfSBmcm9tIFwiLi9tb25zdHJ1b1wiO1xuaW1wb3J0IHsgVGlwb0F0YXF1ZSB9IGZyb20gXCIuL3RpcG9BdGFxdWVcIjtcbmltcG9ydCB7IGdhbWVDb25maWcgfSBmcm9tIFwiLi9jb25maWdcIjtcbmltcG9ydCB7IEVzY2VuYSB9IGZyb20gXCIuL2VzY2VuYVwiO1xuXG5leHBvcnQgY2xhc3MgSnVlZ28ge1xuICAgIHByaXZhdGUgX21hcGE6IG51bWJlcltdW107XG4gICAgcHJpdmF0ZSBfY2FtaW5vOiBQdW50b1tdOyBcbiAgICBwcml2YXRlIF9tb25zdHJ1b3M6IE1vbnN0cnVvW107XG4gICAgcHJpdmF0ZSBfdG9ycmVzOiBUb3JyZVtdO1xuICAgIHByaXZhdGUgX29sZWFkYTogbnVtYmVyID0gMDtcbiAgICBwcml2YXRlIF92aWRhOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBfZXNjZW5hOiBFc2NlbmE7XG5cbiAgICBjb25zdHJ1Y3RvcihtYXBhOiBudW1iZXJbXVtdKSB7XG4gICAgICAgIHRoaXMuX3RvcnJlcyA9IFtdO1xuICAgICAgICB0aGlzLl9tb25zdHJ1b3MgPSBbXTtcbiAgICAgICAgdGhpcy5fY2FtaW5vID0gW107XG4gICAgICAgIHRoaXMuX3ZpZGEgPSBnYW1lQ29uZmlnLnZpZGFKdWdhZG9yO1xuICAgICAgICB0aGlzLl9tYXBhID0gbWFwYTtcbiAgICAgICAgdGhpcy5pbml0KCk7XG4gICAgICAgIHRoaXMuX2VzY2VuYSA9IG5ldyBFc2NlbmEoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBfbW9uc3RydW9zVml2b3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb25zdHJ1b3MuZmlsdGVyKG0gPT4gbS52aWRhID4gMCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0KCkge1xuICAgICAgICB0aGlzLmxlZXJDYW1pbm8oKTtcblxuICAgICAgICAvL3RoaXMuY3JlYXJUb3JyZShuZXcgUHVudG8oMSwgMCksIDIsIG5ldyBUaXBvQXRhcXVlKDMsIDUwMCkpO1xuICAgICAgICB0aGlzLmNyZWFyVG9ycmUobmV3IFB1bnRvKDEsIDEpLCAyLCBuZXcgVGlwb0F0YXF1ZSgzLCA1MDApKTtcblxuICAgICAgICB0aGlzLmNvbWVuemFyT2xlYWRhKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb21lbnphck9sZWFkYSgpIHtcbiAgICAgICAgdGhpcy5jcmVhck9sZWFkYSgpO1xuICAgICAgICB0aGlzLmNvbWVuemFyTW92aW1pZW50bygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY3JlYXJPbGVhZGEoKSB7XG4gICAgICAgIGNvbnN0IGRhdG9zID0gZ2FtZUNvbmZpZy5vbGVhZGFzW3RoaXMuX29sZWFkYV07XG5cbiAgICAgICAgdGhpcy5fbW9uc3RydW9zID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRvcy5jYW50aWRhZDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWFyTW9uc3RydW8oZGF0b3MudmVsb2NpZGFkLCBkYXRvcy52aWRhLCB0aGlzLl9jYW1pbm8pOyAgICAgICAgICAgIFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjb21lbnphck1vdmltaWVudG8oKSB7XG4gICAgICAgIGxldCBpbmRpY2VNb25zdHJ1byA9IDA7XG5cbiAgICAgICAgbGV0IGlkSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kaWNlTW9uc3RydW8gPCB0aGlzLl9tb25zdHJ1b3MubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9uc3RydW9zW2luZGljZU1vbnN0cnVvXS5jb21lbnphck1vdmltaWVudG8oKTtcbiAgICAgICAgICAgICAgICBpbmRpY2VNb25zdHJ1bysrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm5vdGlmaWNhclRvcnJlcygpO1xuXG4gICAgICAgICAgICB0aGlzLl9tb25zdHJ1b3MuZm9yRWFjaCgobSwgaSwgYSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChtLnZpZGEgPiAwICYmIG0ucG9zaWNpb24uZXF1YWxzKG5ldyBQdW50bygtMSwgLTEpKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBxdWl0YXIgdmlkYSBhbCBqdWdhZG9yIHkgbWF0YXIgbW9uc3RydW9cbiAgICAgICAgICAgICAgICAgICAgYVtpXS5yZWNpYmlyRGFuaW8oOTk5KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZXJkZXJWaWRhKDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5fbW9uc3RydW9zVml2b3MubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgICAgICBjbGVhckludGVydmFsKGlkSW50ZXJ2YWwpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9vbGVhZGEgPCBnYW1lQ29uZmlnLm9sZWFkYXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29sZWFkYSsrO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbWVuemFyT2xlYWRhKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXJtaW5hckp1ZWdvKHRydWUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9lc2NlbmEuZGlidWphckVzY2VuYSh0aGlzLl9tYXBhLCB0aGlzLl9tb25zdHJ1b3NWaXZvcywgdGhpcy5fdG9ycmVzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc29sZS5sb2codGhpcy5fdmlkYS50b1N0cmluZygpKTtcbiAgICAgICAgfSwgZ2FtZUNvbmZpZy5pbnRlcnZhbG8pO1xuICAgIH1cblxuICAgIHByaXZhdGUgcGVyZGVyVmlkYShkYW5pbzogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX3ZpZGEgLT0gZGFuaW87XG4gICAgICAgIGlmICh0aGlzLl92aWRhIDw9MCkge1xuICAgICAgICAgICAgdGhpcy50ZXJtaW5hckp1ZWdvKGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdGVybWluYXJKdWVnbyh2aWN0b3JpYTogYm9vbGVhbikgeyBjb25zb2xlLmxvZygnSlVFR08gVEVSTUlOQURPJykgfTtcblxuICAgIHByaXZhdGUgbm90aWZpY2FyVG9ycmVzKCkge1xuICAgICAgICB0aGlzLl90b3JyZXMuZm9yRWFjaCh0ID0+IHQub2JzZXJ2YXIodGhpcy5fbW9uc3RydW9zVml2b3MpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1vc3RyYXJNYXBhKCkge1xuICAgICAgICAvL1BvciBpbXBsZW1lbnRhciwgZGlidWphciBtb25zdHJ1b3MgeSB0b3JyZXNcbiAgICAgICAgZG9jdW1lbnQuYm9keS5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgXG4gICAgICAgIGZvciAobGV0IHJvdyBvZiB0aGlzLl9tYXBhKSB7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGNvbCBvZiByb3cpIHtcbiAgICAgICAgICAgICAgICBpZiAoY29sID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LndyaXRlKCcjJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQud3JpdGUoJyAnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRvY3VtZW50LndyaXRlKFwiPGJyIC8+XCIpO1xuICAgICAgICB9ICAgICAgIFxuICAgIH1cblxuICAgIHByaXZhdGUgbGVlckNhbWlubygpIHtcblxuICAgICAgICBsZXQgeCA9IDA7XG4gICAgICAgIGxldCB5ID0gMDtcblxuICAgICAgICBmb3IgKGxldCByb3cgb2YgdGhpcy5fbWFwYSkge1xuICAgICAgICAgICAgZm9yIChsZXQgY29sIG9mIHJvdykge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChjb2wgPT0gKHRoaXMuX2NhbWluby5sZW5ndGggKyAxKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYW1pbm8ucHVzaChuZXcgUHVudG8oeCwgeSkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxlZXJDYW1pbm8oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgeCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeSsrO1xuICAgICAgICAgICAgeCA9IDA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWFyVG9ycmUocG9zOlB1bnRvLCByYW5nbzpudW1iZXIsIHRpcG9BdGFxdWU6VGlwb0F0YXF1ZSkge1xuICAgICAgICBsZXQgdG9ycmUgPSBuZXcgVG9ycmUocG9zLCByYW5nbywgdGlwb0F0YXF1ZSk7XG4gICAgICAgIHRoaXMuX3RvcnJlcy5wdXNoKHRvcnJlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGVsaW1pbmFyVG9ycmUodG9ycmU6VG9ycmUpIHtcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5fdG9ycmVzLmluZGV4T2YodG9ycmUpO1xuICAgICAgICB0aGlzLl90b3JyZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNyZWFyTW9uc3RydW8odmVsb2NpZGFkOm51bWJlciwgdmlkYTpudW1iZXIsIGNhbWlubzpQdW50b1tdKSB7XG4gICAgICAgIGxldCBtb25zdHJ1byA9IG5ldyBNb25zdHJ1byh2ZWxvY2lkYWQsIHZpZGEsIGNhbWlubyk7XG4gICAgICAgIHRoaXMuX21vbnN0cnVvcy5wdXNoKG1vbnN0cnVvKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgSnVlZ28gfSBmcm9tIFwiLi9qdWVnb1wiO1xuXG5jb25zdCBtYXBhID0gW1xuICAgIFsxLDIsMyw0XSxcbiAgICBbMCwwLDAsNV0sXG4gICAgWzksOCw3LDZdXG5dO1xuXG5sZXQganVlZ28gPSBuZXcgSnVlZ28obWFwYSk7XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n")}]);